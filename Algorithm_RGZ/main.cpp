#include <iostream>
#include "graph.h"

int main()
{
	setlocale(LC_ALL, "Russian");
	Graph<int, std::string> graph(Graph<int, std::string>::GraphForm::lGraph);
	std::vector<int> v;
	int begin, end;
	int value;
	int sw = 0;
	bool exit = false;

	std::string menu[] =
	{
		"\n\tМЕНЮ\n"
		"\t1. Вывести граф\n",
		"\t2. Добавить вершину\n",
		"\t3. Удалить вершину\n",
		"\t4. Добавить ребро\n",
		"\t5. Удалить ребро\n",
		"\t6. Очистить граф\n",
		"\t7. Меню статистики\n",
		"\t8. Меню конструкторов\n",
		"\t9. Меню конструкторов\n",
		"\t10. Меню конструкторов\n",
		"\t0. Выход из программы\n\n"
	};

	std::string constructorMenu[]
	{
		"\n\t1. Создать граф без рёбер\n",
		"\t2. Создать граф со случайными рёбрами\n",
		"\t0. Вернуться обратно\n\n"
	};

	std::string statisticMenu[]
	{
		"\n\t1. Вывести количество вершин\n",
		"\t2. Вывести количество рёбер\n",
		"\t3. Вывести коэффициент насыщенности графа\n",
		"\t4. Форма представления графа\n",
		"\t5. Ориентация графа\n",
		"\t0. Вернуться обратно\n\n"
	};

	std::string iteratorMenu[]
	{
		"\n\t1. Создать итератор\n",
		"\n\t2. Выполнить iterator++\n",
		"\t0. Вернуться обратно\n\n"
	};

	std::string reverseIteratorMenu[] 
	{
		"\n\t1. Создать обратный итератор\n",
		"\n\t2. Выполнить reverseIterator++\n",
		"\t0. Вернуться обратно\n\n"
	};

	//graph.insertVertex(std::vector<int> { });
	//graph.insertVertex(std::vector<int> {0});
	//graph.insertVertex(std::vector<int> {1});
	//graph.insertVertex(std::vector<int> {0, 1, 2});

	while (!exit)
	{
		for (int i = 0; i < sizeof(menu) / sizeof(std::string); i++)
		{
			std::cout << menu[i];
		}
		std::cout << "Введите номер операции: ";
		std::cin >> sw;
		switch (sw)
		{
		case 1:
			graph.printGraph();
			break;
		case 2:
			std::cout << "Введите смежные вершины\n";
			while (std::cin >> value && value != -1) 
			{
				v.insert(v.begin(), value);
			}
			graph.insertVertex(v);
			v.clear();
			break;
		case 3:
			std::cout << "Введите номер вершины: ";
			std::cin >> value;
			graph.deleteVertex(value);
			break;
		case 4:
			std::cout << "Введите номер первой вершины: ";
			std::cin >> begin;
			std::cout << "Введите номер второй вершины: ";
			std::cin >> end;
			graph.insertEdge(begin, end);
			break;
		case 5:
			std::cout << "Введите номер первой вершины: ";
			std::cin >> begin;
			std::cout << "Введите номер второй вершины: ";
			std::cin >> end;
			graph.deleteEdge(begin, end);
			break;
		case 6:
			graph.clear();
			break;
		case 7:
			while (!exit)
			{
				for (int i = 0; i < sizeof(statisticMenu) / sizeof(std::string); i++)
				{
					std::cout << statisticMenu[i];
				}
				std::cout << "Введите номер операции: ";
				std::cin >> sw;
				switch (sw)
				{
				case 1:
					std::cout << graph.getGraphVCount() << "\n";
					break;
				case 2:
					std::cout << graph.getGraphECount() << "\n";
					break;
				case 3:
					std::cout << graph.countSaturation() << "\n";
					break;
				case 4:
					if (graph.getGraphForm() == Graph<int, std::string>::GraphForm::mGraph)
						std::cout << "M - граф\n";
					else
						std::cout << "L - граф\n";
					break;
				case 5:
					if (graph.getGraphOrientation() == Graph<int, std::string>::GraphOrientation::oriented)
						std::cout << "Ориентированный граф\n";
					else
						std::cout << "Не ориентированный граф\n";
					break;
				case 0:
					exit = true;
					break;
				default:
					std::cout << "Данной операции не существует\n";
					break;
				}
			}
			exit = false;
			break;
		case 8:
			while (!exit)
			{
				int form;
				int orientation;
				for (int i = 0; i < sizeof(constructorMenu) / sizeof(std::string); i++)
				{
					std::cout << constructorMenu[i];
				}
				std::cout << "Введите номер операции: ";
				std::cin >> sw;
				switch (sw)
				{
				case 1:
					std::cout << "\nВведите количество вершин: ";
					std::cin >> value;
					std::cout << "\n0. Ориентированный\n"
						<< "1. Не ориентированный\n"
						<< "Введите ориентацию графа: ";
					std::cin >> orientation;
					std::cout << "\n0. L-граф\n"
						<< "1. M-граф\n"
						<< "Введите форму представления: ";
					std::cin >> form;
					graph.clear();
					graph = Graph<int, std::string>(value, (Graph<int, std::string>::GraphOrientation) orientation,
						(Graph<int, std::string>::GraphForm) form);
					break;
				case 0:
					exit = true;
					break;
				default:
					std::cout << "Данной операции не существует\n";
					break;
				}
			}
			exit = false;
			break;
		case 0:
			exit = true;
			break;
		default:
			std::cout << "Данной операции не существует\n";
			break;
		}
	}
	return 0;
}